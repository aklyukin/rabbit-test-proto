// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rabbit-test-worker.proto

/*
Package rabbittest is a generated protocol buffer package.

It is generated from these files:
	rabbit-test-worker.proto
	rabbit-test.proto

It has these top-level messages:
	NodeStatusResponse
	Empty
	RegisterNodeRequest
	RegisterNodeResponse
	Ping
	Pong
*/
package rabbittest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeStatusResponse_Status int32

const (
	NodeStatusResponse_READY   NodeStatusResponse_Status = 0
	NodeStatusResponse_SLEEP   NodeStatusResponse_Status = 1
	NodeStatusResponse_WORKING NodeStatusResponse_Status = 2
)

var NodeStatusResponse_Status_name = map[int32]string{
	0: "READY",
	1: "SLEEP",
	2: "WORKING",
}
var NodeStatusResponse_Status_value = map[string]int32{
	"READY":   0,
	"SLEEP":   1,
	"WORKING": 2,
}

func (x NodeStatusResponse_Status) String() string {
	return proto.EnumName(NodeStatusResponse_Status_name, int32(x))
}
func (NodeStatusResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type NodeStatusResponse struct {
	Status NodeStatusResponse_Status `protobuf:"varint,1,opt,name=status,enum=rabbittest.NodeStatusResponse_Status" json:"status,omitempty"`
}

func (m *NodeStatusResponse) Reset()                    { *m = NodeStatusResponse{} }
func (m *NodeStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeStatusResponse) ProtoMessage()               {}
func (*NodeStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeStatusResponse) GetStatus() NodeStatusResponse_Status {
	if m != nil {
		return m.Status
	}
	return NodeStatusResponse_READY
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*NodeStatusResponse)(nil), "rabbittest.NodeStatusResponse")
	proto.RegisterType((*Empty)(nil), "rabbittest.Empty")
	proto.RegisterEnum("rabbittest.NodeStatusResponse_Status", NodeStatusResponse_Status_name, NodeStatusResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	CheckStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeStatusResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) CheckStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeStatusResponse, error) {
	out := new(NodeStatusResponse)
	err := grpc.Invoke(ctx, "/rabbittest.Node/CheckStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	CheckStatus(context.Context, *Empty) (*NodeStatusResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabbittest.Node/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CheckStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rabbittest.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckStatus",
			Handler:    _Node_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rabbit-test-worker.proto",
}

func init() { proto.RegisterFile("rabbit-test-worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4a, 0x4c, 0x4a,
	0xca, 0x2c, 0xd1, 0x2d, 0x49, 0x2d, 0x2e, 0xd1, 0x2d, 0xcf, 0x2f, 0xca, 0x4e, 0x2d, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0xc8, 0x80, 0x24, 0x94, 0x1a, 0x18, 0xb9, 0x84, 0xfc,
	0xf2, 0x53, 0x52, 0x83, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x83, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0x6c, 0xb9, 0xd8, 0x8a, 0xc1, 0x22, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xaa,
	0x7a, 0x08, 0x3d, 0x7a, 0x98, 0xea, 0xf5, 0xa0, 0x5c, 0xa8, 0x26, 0x25, 0x6d, 0x2e, 0x36, 0x88,
	0x88, 0x10, 0x27, 0x17, 0x6b, 0x90, 0xab, 0xa3, 0x4b, 0xa4, 0x00, 0x03, 0x88, 0x19, 0xec, 0xe3,
	0xea, 0x1a, 0x20, 0xc0, 0x28, 0xc4, 0xcd, 0xc5, 0x1e, 0xee, 0x1f, 0xe4, 0xed, 0xe9, 0xe7, 0x2e,
	0xc0, 0xa4, 0xc4, 0xce, 0xc5, 0xea, 0x9a, 0x5b, 0x50, 0x52, 0x69, 0xe4, 0xc5, 0xc5, 0x02, 0x32,
	0x5a, 0xc8, 0x89, 0x8b, 0xdb, 0x39, 0x23, 0x35, 0x39, 0x1b, 0x6a, 0x84, 0x20, 0xb2, 0xdd, 0x60,
	0x95, 0x52, 0x72, 0xf8, 0x9d, 0xa3, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0xaa, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x85, 0xf7, 0x82, 0x84, 0x06, 0x01, 0x00, 0x00,
}
