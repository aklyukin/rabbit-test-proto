// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rabbit-test.proto

package rabbittest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegisterNodeRequest struct {
	NodeName string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *RegisterNodeRequest) Reset()                    { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()               {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RegisterNodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type RegisterNodeResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=isRegistered" json:"isRegistered,omitempty"`
}

func (m *RegisterNodeResponse) Reset()                    { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()               {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RegisterNodeResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type Ping struct {
	NodeName string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Ping) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type Pong struct {
	ServerName string `protobuf:"bytes,1,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Pong) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterNodeRequest)(nil), "rabbittest.RegisterNodeRequest")
	proto.RegisterType((*RegisterNodeResponse)(nil), "rabbittest.RegisterNodeResponse")
	proto.RegisterType((*Ping)(nil), "rabbittest.Ping")
	proto.RegisterType((*Pong)(nil), "rabbittest.Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Server service

type ServerClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	PingServer(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := grpc.Invoke(ctx, "/rabbittest.Server/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) PingServer(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/rabbittest.Server/PingServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	PingServer(context.Context, *Ping) (*Pong, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabbittest.Server/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabbittest.Server/PingServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).PingServer(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rabbittest.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Server_RegisterNode_Handler,
		},
		{
			MethodName: "PingServer",
			Handler:    _Server_PingServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rabbit-test.proto",
}

func init() { proto.RegisterFile("rabbit-test.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0xae, 0x82, 0x30,
	0x18, 0xc4, 0x21, 0x21, 0x84, 0xf7, 0x85, 0xc5, 0xb3, 0xba, 0x30, 0x2c, 0x94, 0x74, 0x61, 0xdc,
	0x48, 0x22, 0xee, 0x3c, 0x04, 0x21, 0xe5, 0x04, 0x10, 0xbe, 0x34, 0x5d, 0xd8, 0x62, 0x5b, 0xbd,
	0x87, 0x37, 0x36, 0x80, 0x7f, 0x4a, 0xa2, 0x2e, 0xe7, 0xd7, 0x99, 0x76, 0xa6, 0x30, 0xd3, 0x75,
	0xd3, 0x08, 0xbb, 0xb3, 0x68, 0x6c, 0xd6, 0x69, 0x65, 0x15, 0x81, 0x11, 0xf5, 0x84, 0xee, 0x61,
	0xce, 0x90, 0x0b, 0x63, 0x51, 0x17, 0xaa, 0x45, 0x86, 0xe7, 0x0b, 0x1a, 0x4b, 0x12, 0x88, 0xa4,
	0x6a, 0xb1, 0xa8, 0x4f, 0xb8, 0xf4, 0x53, 0x7f, 0xfb, 0xc7, 0x5e, 0x9a, 0x1e, 0x61, 0x31, 0x8d,
	0x98, 0x4e, 0x49, 0x83, 0x84, 0x42, 0x2c, 0xcc, 0xf3, 0x04, 0xdb, 0x21, 0x17, 0xb1, 0x09, 0xa3,
	0x14, 0x82, 0x52, 0x48, 0xfe, 0xf3, 0xfe, 0x0d, 0x04, 0xa5, 0x92, 0x9c, 0xac, 0x00, 0x0c, 0xea,
	0x2b, 0x6a, 0xc7, 0xe5, 0x90, 0xfc, 0xe6, 0x43, 0x58, 0x0d, 0x92, 0x54, 0x10, 0xbb, 0x95, 0xc8,
	0x3a, 0x7b, 0x4f, 0xcc, 0x3e, 0xec, 0x4b, 0xd2, 0xef, 0x86, 0x71, 0x0d, 0xf5, 0x48, 0x0e, 0xd0,
	0x77, 0x7d, 0x3c, 0xf1, 0xef, 0x26, 0x7a, 0x9e, 0x4c, 0x89, 0x92, 0x9c, 0x7a, 0x4d, 0x38, 0xfc,
	0xf0, 0xe1, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xef, 0xd4, 0x67, 0xc4, 0x76, 0x01, 0x00, 0x00,
}
